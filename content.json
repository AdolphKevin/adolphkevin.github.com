{"meta":{"title":"闹闹吃鱼","subtitle":"闹闹","description":"闹闹的小站","author":"闹闹","url":"https://AdolphKevin.github.io","root":"/"},"pages":[],"posts":[{"title":"golang的反射机制与实践（下）","slug":"golang的反射机制与实践（下）","date":"2019-06-12T23:07:33.000Z","updated":"2019-06-12T23:11:06.079Z","comments":true,"path":"2019/06/13/golang的反射机制与实践（下）/","link":"","permalink":"https://AdolphKevin.github.io/2019/06/13/golang的反射机制与实践（下）/","excerpt":"","text":"上篇说了下反射该怎么用，现在我们来看一看使用反射的实际情况，深入理解一下 这篇因为是实践篇，所以有大量的代码示例来进行演示，因为只是演示反射的使用，所以对一些复杂的错误机制没做处理 反射本身并不难，看懂了上一章反射到底是干嘛用的，什么时候用，这一章其实非常好懂 说到底就是将reflect包提供给我们的方法，进行一些组合使用罢了，说土一点就是调用下API 没看上篇的可以先看看golang的反射与实践（上） 反射的实践操作好了，咱们开始进行实践 先把我们的准备工作做好，先定义一个Struct，再给这个结构体加上一些方法12345678910111213141516171819202122232425// Employee 员工type Employee struct &#123; Name string `json:\"emp_name\"` Age int `json:\"emp_age\"` Sex int&#125;// GetSum 返回两数之和func (e *Employee) GetSum(n1, n2 int) int &#123; return n1 + n2&#125;// Set 接受值，给结构体e赋值func (e *Employee) Set(name string, age, sex int) &#123; e.Name = name e.Age = age e.Sex = sex&#125;// Print 打印结构体*Employee func (e *Employee) Print() &#123; log.Print(\"======Start======\") log.Print(e) log.Print(\"======End======\")&#125; 随便给这个结构体写了几个方法，我们主要是看，我们如何使用反射在运行时对变量进行一个操作 使用反射来遍历结构体的字段值，并获取结构体的tag标签先来看个常规用法 123456789101112131415161718192021222324252627282930313233// GetStruct 获取结构体的字段及tagfunc GetStruct(i interface&#123;&#125;) &#123; rType := reflect.TypeOf(i) rVal := reflect.ValueOf(i) kd := rVal.Kind() // 如果是传进来的是指针类型 // 则获取指针值 if kd == reflect.Ptr &#123; rType = rType.Elem() rVal = rVal.Elem() kd = rVal.Kind() &#125; if kd != reflect.Struct &#123; log.Panicf(\"Kind is %v not struct \", kd) &#125; // 获取结构体的字段数 sNum := rVal.NumField() log.Printf(\"Struct has %v fields \", sNum) // 遍历结构体的所有字段 for i := 0; i &lt; sNum; i++ &#123; log.Printf(\"Field %d value is %v\", i, rVal.Field(i)) // 获取Struct的tag，使用Type类型获取 tag := rType.Field(i).Tag.Get(\"json\") if tag == \"\" &#123; log.Printf(\"Field %d hasn't tag %v \", i, tag) continue &#125; log.Printf(\"Field %d tag is %v \", i, tag) &#125;&#125; 我们定义一个方法GetStruct(i interface{})，因为入参是interface{}类型，所以这个方法可以接收并处理所有的数据类型。这就是反射的牛逼之处了 遗憾的是，反射的性能比较低。后面咱们对性能进行分析时再拿出来聊聊 测试用例如下 12345func TestGetStruct(t *testing.T) &#123; emp := &amp;Employee&#123;&#125; emp.Set(\"闹闹\", 99, 0) GetStruct(emp)&#125; 执行结果如下图所示 这个函数接受的参数是interface，也就是说，通过这个函数，不管入参传递了什么样的结构体，我们可以知道这个结构体有什么标签，有几个方法 获取tag标签的用处就是对我们的结构体进行序列化时使用，将结构体的字段名变成我们需要的别名 可以参考下encoding/json包的使用方式 获取并调用结构体的方法12345678910111213141516171819202122232425262728293031323334353637383940// CallMethod 调用结构体方法// i : 传入的struct// methodByName : 调用结构体的方法名func CallMethod(i interface&#123;&#125;, methodByName string) &#123; rVal := reflect.ValueOf(i) rType := reflect.TypeOf(i) log.Printf(\"Type is %v Kind is %v\", rType, rType.Kind()) // 获取结构体有多少个方法 numOfMethod := rVal.NumMethod() log.Printf(\"Struct has %d method\", numOfMethod) // 声明Value数组 var params []reflect.Value // 声明一个Value类型，用于接收方法 var method reflect.Value if methodByName == \"GetSum\" &#123; // 调用方法时的参数 params = append(params, reflect.ValueOf(10)) params = append(params, reflect.ValueOf(88)) &#125; if methodByName == \"Set\" &#123; // 调用方法时的参数 params = append(params, reflect.ValueOf(\"闹闹吃鱼\")) params = append(params, reflect.ValueOf(18)) params = append(params, reflect.ValueOf(0)) &#125; // 获取方法 method = rVal.MethodByName(methodByName) if !method.IsValid() &#123; // 如果结构体不存在此方法，输出Panic log.Panic(\"Method is invalid\") &#125; result := method.Call(params) if len(result) &gt; 0 &#123; // 如果函数存在返回值，则打印第一条 log.Println(\"Call result is \", result[0]) &#125;&#125; 这里值得注意一点的就是，我们通过反射的Call去调用函数，传入的参数的类型是reflect.Value类型，并不是我们定义函数时的int类型 所以在调用函数时传入的参数需要进行一个类型转换 给你们附上测试用例，你们可以自己调试跑跑，会发现，不管你传的结构体的字段是什么，我都进行统一处理了1234567func TestCallMethod(t *testing.T) &#123; emp := &amp;Employee&#123;&#125; emp.Set(\"闹闹\", 99, 0) emp.Print() CallMethod(emp, \"Set\") emp.Print()&#125; 修改字段值123456789// ModifyField 修改字段值func ModifyField(i interface&#123;&#125;, filedName string) &#123; rVal := reflect.ValueOf(i) filed := rVal.Elem().FieldByName(filedName) if !filed.IsValid() &#123; log.Panic(\"filedName is invalid\") &#125; filed.SetString(\"闹闹\")&#125; 运行时修改结构体的字段，主要就是做到一个通用性，比如上述的例子，不管是什么结构体 依然附上测试用例1234func TestModifyField(t *testing.T) &#123; emp := &amp;Employee&#123;&#125; ModifyField(emp, \"Name\")&#125; 不管传入的结构体是什么，只要包含了filedName（我们指定的字段名），我们就可以对其进行值的更改 假如我们有100个结构体，需要对name字段进行修改，通过反射的机制，我们代码的耦合度将大大的降低 定义适配器，用作统一处理接口123456789101112131415161718// Bridge 适配器// 可以实现调用任意函数func Bridge(call interface&#123;&#125;, args ...interface&#123;&#125;) &#123; var ( function reflect.Value inValue []reflect.Value ) n := len(args) // 将参数转换为Value类型 inValue = make([]reflect.Value, n) for i := 0; i &lt; n; i++ &#123; inValue[i] = reflect.ValueOf(args[i]) &#125; // 获得函数的Value类型 function = reflect.ValueOf(call) // 传参，调用函数 function.Call(inValue)&#125; 写了个测试用例，函数是我们在调用Bridge前就已经定义好了 1234567891011func TestBridge(t *testing.T) &#123; call1 := func(v1, v2 int) &#123; log.Println(v1, v2) &#125; call2 := func(v1, v2 int, str string) &#123; log.Println(v1, v2, str) &#125; Bridge(call1, 1, 2) Bridge(call2, 2, 3, \"callTest\")&#125; 两个函数是不同的函数，但是都可以通过Bridge进行执行 适配器有什么用呢？如果不知道的童鞋，可以去看看设计模式「适配器模式」 因为本篇幅只是说如何在实战中应用反射，所以这里就不讲解设计模式了 使用反射创建，并操作结构体123456789101112131415161718192021// CreateStruct 使用反射创建结构体// 并给结构体赋值func CreateStruct(i interface&#123;&#125;) *Employee &#123; var ( structType reflect.Type structValue reflect.Value ) // 获取传入结构体指向的Type类型 structType = reflect.TypeOf(i).Elem() // 创建一个结构体 // structValue持有一个指向类型为Type的新申请的指针 structValue = reflect.New(structType) // 转换成我们要创建的结构体 modle := structValue.Interface().(*Employee) // 取得structValue指向的值 structValue = structValue.Elem() // 给结构体赋值 structValue.FieldByName(\"Name\").SetString(\"闹闹吃鱼\") structValue.FieldByName(\"Age\").SetInt(100) return modle&#125; 使用方式就看看测试用例 12345678910func TestCreateStruct(t *testing.T) &#123; emp := &amp;Employee&#123; Name: \"NaoNao\", Age: 18, Sex: 1, &#125; emp.Print()// &amp;&#123;NaoNao 18 1&#125; newEmp := CreateStruct(emp) newEmp.Print()// &amp;&#123;闹闹吃鱼 100 0&#125;&#125; 可能你会问，CreateStruct的入参不是interface{}吗？可为什么我传一个任意的结构体，却要给返回一个指定的结构体呢？就不能我传什么结构体进去，就返回什么结构体出来吗？ 理想总是丰满的，现实却是非常骨感，虽然我们反射的方法实现，都是将入参写为interface{}，但使用反射并不是意味着我们一定就写了一个万能的程序 还记得上一篇提到的，变量与reflect.Value之间该如何转换吗？ 咱们再复习一下：变量&lt;------&gt;interface{}&lt;------&gt;reflect.Value 我们不管是把Value转为结构体，还是转为基本类型，我们都需要在编译前确定转换后的类型 换句话说，只要我们在运行时牵扯到类型的转换，我们都需要各种if来判断是否能转换成我们需要的类型 本文以大量的代码实现来阐述反射该怎么用，说实话，挺无聊的 写这篇文章的目的就是让你拿电脑上去编译跑跑，或者什么时候想到要用反射了，可以拿出来瞅瞅，看看什么地方需要用到反射，反射又可以干什么 微信扫码关注公众号「闹闹吃鱼」，还可领取Go语言学习大礼包，入门到进阶不再了无头绪","categories":[{"name":"golang","slug":"golang","permalink":"https://AdolphKevin.github.io/categories/golang/"}],"tags":[{"name":"反射","slug":"反射","permalink":"https://AdolphKevin.github.io/tags/反射/"}]},{"title":"golang的反射机制与实践（上）","slug":"golang的反射机制与实践（上）","date":"2019-06-08T19:16:43.000Z","updated":"2019-06-11T22:57:04.708Z","comments":true,"path":"2019/06/09/golang的反射机制与实践（上）/","link":"","permalink":"https://AdolphKevin.github.io/2019/06/09/golang的反射机制与实践（上）/","excerpt":"","text":"反射机制是一个很重要的内容，当我们写框架的时候，要想要松耦合，高复用，那么就有很多地方都需要用到反射，可谓是中高级程序员必须掌握的知识点 很多后台语言都有反射机制，但它们的使用原理大多都是一样的 各语言不同的地方，大致就是代码实现方式不一致罢了 其根本，都是从变量得到反射对象，再由反射对象去操作原变量 好了，步入正题 什么是反射我就用一句话来概括吧 使用反射，可以让我们在程序运行时对任意类型的对象进行操作 注意操作这两个字，操作是指：可以获取对象的信息、改变对象的值、调用对象的方法、甚至是创建一个对象 说到这你可能有点困惑，我们在编写代码的时候不就已经把该实例化的象进行了实例化，该调用的方法都调用了嘛？为什么写程序的时候不调用方法，偏要在运行时去进行这些操作？ 其实问题就在这里，如果我们在写程序的时候，一切的对象与方法都能够确定了，那还要反射做什么？ 正是因为我们在写程序的时候，要想写一些“万能程序”，用于降低代码的耦合度，所以我们才需要反射，用于处理一些未知的对象 想想，当我们写一个方法，不管别人往我们这个方法内传入什么样的参数，最后我们的函数都能给别人所需要的内容。是不是感觉很牛逼？ 反射的使用原理我这里主要说使用反射的原理，并不是刨析反射的底层原理，有兴趣想要探索原理的读者大人，可以去看看go的reflect包源码 先给你们上个图，看懂这个关系图，后面的文字基本也就可以不看了 没看懂没关系，稍微解释就能明白~~ 我们定义的一个变量，不管是基本类型int，还是一个结构体Employee，我们都可以通过reflect.TypeOf()获取他的反射类型Type，也可以通过reflect.ValueOf()去获取他的反射值Value 我们学习反射，其实就是学习如何使用原变量，去取得reflect.Type或者reflect.Value这种反射对象；再使用这个反射对象Type以及Value，反过来对原变量进行操作 弄明白了这个道理，那一切都将变得简单 剩下的，我们只是需要去学习reflect包中提供的方法。当我们需要要怎么操作变量，就使用其提供的对应方法即可 反射的注意事项与细节Type与Kind的区别是什么？Type是类型，Kind是类别，听起来有点绕，他们之间的关系为Type是Kind的子集 如果变量是基本类型，那么Type与Kind得到的结果是一致的，比如变量为int类型，Type与Kind的值相等，都为int 但当变量为结构体时，Type与Kind的值就不一样了 我们来看个实际案例123456789101112func main() &#123; var emp Employee emp = Employee&#123; Name: \"naonao\", Age: 99, &#125; rVal := reflect.ValueOf(emp) log.Printf(\"Kind is %v ,Type is %v\", rVal.Kind(), rVal.Type()) // Kind is struct ,Type is main.Employee&#125; 可以看到，Kind的值是struct,而Type的值是包名.Employee 反射如何在变量与reflect.Value之间切换？变量可以转换成interface{}之后，再转换成reflect.Value类型，既然空接口可以转换成Value类型，那么自然也可以反过来转换成变量 用个表达式来表示，就如下所示 变量interface{}reflect.Value 利用空接口来进行中转，这样变量与Value之间就可以实现互相转换了 下面我们再说如何用代码实现转换 如何使用反射获取变量本身的值？这里我们要注意一下，reflect.ValueOf()得到的值是reflect.Value类型，并不是变量本身的值 123var num = 1rVal := reflect.ValueOf(num)log.Printf(\"num is %v\", num + rVal) 这段代码会报错invalid operation: num + rVal (mismatched types int and reflect.Value) 很明显，rVal是属于reflect.Value类型，不能与int类型相加 那怎样才能获得它本身的值呢？ 如果是基本类型，比如var num int,那么使用reflect包里提供的转换方法即可reflect.ValueOf(num).Int() 或者是float，那就调用reflect.ValueOf(num).float()，如果是其它的基本类型，需要的时候去文档里面找找即可 但如果是我们自己定义的结构体，因为reflect包无法确定我们自己定义了什么结构体，所以本身并不会带有结构体转换的方法，那么我们只能通过类型断言来进行转换 也就是上面说的，利用空接口进行中转，再利用断言进行类型转换，可以看如下代码示例 1234567891011121314151617181920212223// Employee 员工type Employee struct &#123; Name string Age int&#125;func main() &#123; emp := &amp;Employee&#123; Name: \"naonao\", Age: 99, &#125; reflectPrint(emp)&#125;func reflectPrint(v interface&#123;&#125;) &#123; rVal := reflect.ValueOf(v) // 获取reflect.Value iV := rVal.Interface() // 利用空接口进行中转 empVal, ok := iV.(*Employee) // 利用断言转换 if ok &#123; // 如果成功转换则打印结构体 log.Print(empVal) &#125;&#125; 这里我只是进行了一个简单的判断，如果想要进行完整的判断，还是需要借助swith语句，下篇会提到。也可以参照reflect包的单元测试文件 通过反射来修改变量先来看看代码如何实现 12345678910func main() &#123; var num = 1 modifyValue(&amp;num)// 传递地址 log.Printf(\"num is %v\", num)// num is 20&#125;func modifyValue(i interface&#123;&#125;) &#123; rVal := reflect.ValueOf(i) rVal.Elem().SetInt(20)&#125; 细心的你肯定发现了一点异常，函数接收的参数不再是值了，而是接受了一个指针地址 改变值的时候，先调用了Elem()方法，再进行了一个SetInt()的操作 为什么直接传值不行呢？因为reflect包中提供的所有修改变量值的方法，都是对指针进行的操作 那为什么还要先使用Elem()呢？因为Elem()的作用，就是取得指针地址所对应的值，取到值了，我们才能对值进行修改 总不可能连值都没拿到手，就想着去改值吧？ 如何理解reflect.Value.Elem()关于Elem()的使用可以简单的理解为123num := 1prt *int := &amp;num // 获取num的指针地址num2 := *ptr // 从指针处取值 因为我们传递了一个地址，所以我们要先拿到这个地址的指针，再通过指针去取得所对应的值 reflect包底层实现就是基于这个原理，不过它的底层代码加了较多的判断，用来保证稳定性 写在最后这篇先说些基础概念，下篇我们再从实践出发，看看在什么地方需要使用反射，又该如何使用reflect包提供的方法去实现 微信扫码关注公众号「闹闹吃鱼」，还可领取Go语言学习大礼包，入门到进阶不再无头绪","categories":[{"name":"golang","slug":"golang","permalink":"https://AdolphKevin.github.io/categories/golang/"}],"tags":[{"name":"反射","slug":"反射","permalink":"https://AdolphKevin.github.io/tags/反射/"}]},{"title":"彻底弄懂二分查找法，明确边界的意义","slug":"如何才能写出正确的程序？","date":"2019-06-02T11:45:39.911Z","updated":"2019-06-02T11:56:19.711Z","comments":true,"path":"2019/06/02/如何才能写出正确的程序？/","link":"","permalink":"https://AdolphKevin.github.io/2019/06/02/如何才能写出正确的程序？/","excerpt":"","text":"平时我们写程序的时候，总是莫名其妙的出现Bug，一鼓作气的写完一个接口后，经常被队友喷「你怎么一回事？结果与预期不一致啊」 老脸一红，然后一个人藏在角落调试半天，才发现原来是某一个边界条件没处理好，导致Bug重重，今天我们从二分查找算法，来聊聊如何写出正确的程序 像我们熟知的二分查找算法，在1946年就被提出来了，但是到了1962年才出现了完全没有Bug的二分查找法 二分查找法的思想并不复杂，我们很多人张口就能来，但是为什么间隔了辣么多年，才诞生完全没有Bug的二分查找算法呢？ 因为学习一个算法的思想是很简单的，但是让思想落地，写出完全没有Bug的二分查找，却并不是一件容易的事情 二分查找算法，难就难在边界条件的处理上，我们经常写出Bug，往往也是出现在边界条件没处理好而导致 所以我们在写程序时，首先就需要明确的边界的意义，在程序内部的实现时，就是要不断的维护这个边界的意义 二分查找法的思想在这简单复述一下 1.在一个有序的数组中，查询一个目标值target， 2.如果目标值target 比数组的中间值要大，那么我们就往数组中间值后面的范围内去查询 3.如果目标值target 比数组的中间值要小，我们就往数组中间值前面的范围内查询 4.如此往复的执行2，3步，直到查询到目标值target 等于其数组范围内的某一个值，然后返回其值对应的索引位置，又或者数组中压根就没有我们想要找的目标值target 好了，说完了算法的思想，我们就来动手实践一下把。在这里我就用Go语言来实现了，给你们宣传了一个多月让你们学Go语言，还给你们找了那么多学习资料，有从小白到中高级的Go语言视频，也有从小白到大牛的书籍资料。你们要现在一点都没看，那可就枉费我一片苦心了 想学Golang，但还没有头绪的童鞋，看完文章后直接在公众号后台回复「Go」，即可领取全部学习资源，别忘了回来点个在看啊 把算法思想落地我们先定义一个二分查找的函数MyBinarySearch，之所以叫这名字-，-是因为Go有个binary包，里面有叫BinarySearch的函数，咱们需要跟它区分开来，否则编译器会提示我们在瞎搞（仿佛在跟我说：你是不是傻，有现成的不用，偏要自己搞）123func MyBinarySearch(arr []int, target int) (middle int) &#123;&#125; 我们传入一个数组，以及一个要查询的目标值target，如果target 存在于数组中，我们则返回它对应的索引位置 二分查找，容易出问题的地方就是边界问题，那咱们先定义先设定一个边界，我们需要在边界范围内去查询 12 // 明确边界的意义，在 [left,right] 中寻找targetleft, right := 0, len(arr)-1 我们要铭记，我们在程序中，每一个变量都是有意义的，我们需要明确每一个变量的意义，我们的查询范围，就是在[left,right]中去查询目标值target ，看清楚了，我在这定义的是一个闭区间，也就包含了left 和right 本身所在的位置 明确边界变量的意义后，我们在后面的查找过程中，还需要不断的维护这个意义 我们来循环判断，边界是否有意义，如果这个边界的范围区间包含了有效的整数，则代表这个边界是有意义的，所以当边界存在意义时，我们循环判断此时的中间值是否等于目标值target1234for left &lt;= right &#123; // 在 [left,right] 中寻找targetmiddle = (left + right) / 2 // 中间值的索引位置&#125; 在这可能有人不解，为什么要用&lt;=呢？，比如闭区间[8,8] ，那么这个区间依然是有意义的，因为有一个整数8 ，如果去掉=，那就变成了[8,8)，而此时这个区间范围内，是没任何整数的 现在我们就需要来判断，目标值target 于现在查询范围内中间值的关系，看它是等于，还是小于又或者是大于中间值 如果相等，那就好办了，这不就是我们要找的嘛~直接返回中间值的索引位置就好了 123if arr[middle] == target &#123; return&#125; 那如果不满足，我们就只好再来判断，目标值是小于中间值还是大于中间值了 如果目标值target 小于中间值，那么我们就需要缩小查询的区间范围了 这个时候，我们查询范围就发生了改变，右侧要范围要缩短到中间值的位置，用Code来表达，就是right = middle - 1 1234if target &lt; arr[middle] &#123; // 如果target &lt; 中间值 则代表我们要在左边区间查找 right = middle - 1&#125; 你可能会问，为什么要-1呢？因为我们已经明确知道target &lt; arr[middle]，也就是middle所在的位置，不可能是我们要找的位置，所以我们就需要再往左侧移动一位 说到现在，我想你现在已经彻底弄懂了left与right所代表的含义，那么当target &gt; arr[middle]时，我们的right自然也要在middle的位置上往右移动一位 1234if target &gt; arr[middle] &#123; // 如果target &gt; 中间值，则代表我们要在右边区间查找 left = middle + 1&#125; 上面的Code全部拼凑起来，就是如下所示，如果当目标值不在数组中时，我们就返回 -1 123456789101112131415161718192021// MyBinarySearch 二分查找法，在有序数组中查询目标元素target，并返回元素对应的索引值func MyBinarySearch(arr []int, target int) (middle int) &#123; left, right := 0, len(arr)-1 // 明确边界的意义，在[left,right]中寻找target for left &lt;= right &#123; middle = (left + right) / 2 // 当left &gt; right 时，意味着边界不存在，则代表数组中没有目标值target // 所以当left &lt;= right 时，我们就遍历数组 if arr[middle] == target &#123; return &#125; if target &lt; arr[middle] &#123; // 如果target &lt; 中间值 则代表我们要在左边区间查找 right = middle - 1 &#125; if target &gt; arr[middle] &#123; // 如果target &gt; 中间值，则代表我们要在右边区间查找 left = middle + 1 &#125; &#125; return -1&#125; 我还是简单说下Go语言的函数语法吧，因为我在定义函数的时候，就写明了返回值的变量名middle，给返回值声明了变量名后，执行函数时会给返回值的变量初始化为0值，return返回值也会自动指定对应的变量名 所以我在函数中没有定义middle以及把return middle直接写成了return 循环不变量我猜很多人都是第一次听说这个专业术语，其实我上面已经多次强调这个术语所代表的含义 现在再刻意解释一下，仔细看完上面的内容的你，现在我一说，你肯定就能懂 我们在上面的二分查找中，一直在循环left &lt;= right，这就是循环，当left &lt;= right时，我们的循环不会终止 而不变量是什么呢？left以及right不都是变量么？你怎么说它的不变量呢？ left以及right的值虽然一直都是在改变的，但是它们所代表的含义却是一直都没有改变过，因为我们寻找的永远都是在[left,right]这个闭区间中寻找我们的目标值 程序中left以及right的变化，也只是在不断缩小这个闭区间的范围，并没有改变其声明时所代表的含义，注意我说的，是没有改变声明时的含义 所以要想写出正确的程序，在声明每一个变量时，我们都需要明确其含义，变量在改变时，我们只能改变其数值，而不能改变其变量所代表的意义 一旦声明其变量的意义，后面的程序都是在维护其意义。就像我们每一个人一生下来就有意义，而我们人生的经历，都是在为了完成人生意义而必须所拥有的铺垫 之所以我们的Bug越写越多，多半是因为对变量的含义理解的不透彻，并且经常声明一些无意义的变量所导致（可能你认为有些变量并不是无意义的变量，但事实多半如此） 你以为到这就完了？二分查找从提出到最后无Bug实现，期间经历了16年，要这么简单的就完结了。。。怕是没办法瞒天过海16年了 我们在上面实现的二分查找还是有个Bug隐藏着，那就是middle = (left +right) / 2 如果当left和right数值足够大的时候，我们再这样求和时，int类型就越界啦~ 那越界了咋搞呢？还记得我们之前有说过如何进行大整数求和吧？嗯，记得的话，那你还挺不错的，如果你用那种方式去解决它们求中间值时造成的越界…我只能说…你是不是傻啊… 其实我们稍微改一改middle 的求值方式就好了，从加法改成了减法，那么自然也就不会越界啦~ 就是改成这样子middle = left + (right - left) / 2就好了~ 我这几十年之后的马后炮，真酸爽 写在最后之前说的每周算法题，说实话，停更有好长一段时间了 今天这篇继上一篇，间隔时间估摸着有好几周了…emmmm 不是我不想在这个系列上保持持续更新，而是这货你们连个在看都不点，让我没有欲望继续写下去 你仔细看看我之前的每周算法题系列，就会发现，没有一篇是只说算法的，都是夹杂着其它的思想，或者是开发实践，又或者是一些别的经验 如果只是拿着LeetCode上的题目实现一遍，然后跟你们讲解一遍，我觉得这样做是没用任何意义，因为你们完全可以去Github上看人家的solution，一次性看几十个题都没问题，也可以直接去LeetCode一天刷个几十题，何苦还需要在我这看我BB叨呢… 最后为了证明你彻底掌握循环不变量的关键思想，给你们留个问题吧 我们在之前声明时left = 0，right = len(arr) - 1，现在将right改成right = len(arr)，我们后面在处理区间时，当target &lt; arr[middle]时，left和right又该怎么赋值呢？ 给你们一个提示，我们在写right = len(arr)-1时的查询范围是[left,right]，而right = len(arr)时，查询的范围是[left,right)，注意查询区间的改变~ 之所以给你们留个问题，是因为只看不做还不思考，是很难彻底弄明白的~ 在底下留言给出你的思考吧 微信扫码关注公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦~不仅仅只是技术！","categories":[{"name":"算法","slug":"算法","permalink":"https://AdolphKevin.github.io/categories/算法/"},{"name":"二分查找法","slug":"算法/二分查找法","permalink":"https://AdolphKevin.github.io/categories/算法/二分查找法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://AdolphKevin.github.io/tags/算法/"}]},{"title":"JS该如何取得URL里的参数？","slug":"JS获取URL参数","date":"2019-05-29T13:37:59.334Z","updated":"2019-05-29T17:47:47.998Z","comments":true,"path":"2019/05/29/JS获取URL参数/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/29/JS获取URL参数/","excerpt":"","text":"有一段时间没写过技术干货文了，这两天刚好遇到一个以前没太在意的一个功能实现–前端获取URL传递的参数 掉了一堆头发后，想想还是写出来跟你们分享一下，以后要是你们遇到了也有个参考 要只是获取一些常规字符串到没什么难的，关键还有些乱七八糟的需求，什么同一个参数名传递了多次啊，传数组啊。搞来搞去就写了一大堆 先说说思路吧，如果你看这文章是想要解决问题，拿着代码直接用的话，就直接看最后面的Code实现以及使用方法吧 用框架思维分析问题给你一个如下的URL： http://NaoNao.com/?product=shirt&amp;color=blue&amp;newuser&amp;size=m#Hello 将URL里传递的参数转换为object对象，这样我们在使用参数的时候也更为方便 我曾多次强调框架思维，现在遇到这个问题了，我们就拿框架思维来分析一下，该怎样才能快速解决 首先是要了解我们的目的是什么？目的很简单，取得URL内传递的参数，并且解析成对象 接着再分析我们现在知道些什么？有一串URL 我们再来分析，如果从URL中获得传递的参数，也就是为了达到目的，我们该做些什么？ URL的特征我们大致都知道，就是第一个?后面的字符串，都是传递的参数，但是有个特殊情况请不要忘记了，URL后面有时候会带上一个#，而#后面的内容，并不是我们要传递的参数，而是网页位置的标识符 如果URL中包含了#，我们只需要解析?到#之间的字符串就可以了，如果不包含，那么第一个?后所有的内容都是我们需要解析的 你可能觉得我是在说废话，这么明显的事情，只要不是白痴都能看得懂 我当然知道，只要不是白痴都能看得懂，但我为什么要强调呢？因为我们想要快速的解决问题，必须具备框架思维，也可以说是工程思维 你可能有会说，这么简单的问题需要这样分析么？我们一看就知道了，闹闹你这是杀鸡用牛刀 虽说是杀鸡用牛刀，可要想培养自己的工程思维，那么必须保持刻意训练，直到随手拈来 好了，分析完后，我们按照上面的思路来逐步实现，实现的时候可能会遇到其它的问题，到时候再分析，再解决 毕竟再牛逼的工程师，也不会在动手前就想的面面俱到，只能是在动手实现前尽可能的考虑周到，遇到问题时再快速的迭代更新 JS获取URL参数的过程先用JS拿到URL，如果函数传参了URL，那就用参数。如果没传参，就使用当前页面的URL1var queryString = url ? url.split('?')[1] : window.location.search.slice(1); 如果后面的字符串存在#，我们还得将#后面的字符串去掉，因为#后面的内容并不是我们需要获取的参数，而是网页位置的标识符 1queryString = queryString.split('#')[0]; 好了，把干扰的部分都移除后，我们可以开始安心的解析参数了，先将传递的参数分成数组 1var arr = queryString.split('&amp;'); 现在我们可以获得一个字符串数组1['product=shirt', 'color=blue', 'newuser', 'size=m'] 将字符串拆分成数组后，我们通过创建一个对象，用来存储我们所有的参数1var obj = &#123;&#125;; 我们可以通过遍历数组arr，将它拆分成键值对。把这个字符串做成key:value的对象 1var a = arr[i].split('='); 接下来就是要为每一个变量key分配对应的值value，如果我们得到的value不是一个正确的参数，我们就用true来表示这个参数名存在，当然了，你也可以根据自己的实际情况来做改变 12var paramName = a[0];var paramValue = typeof(a[1]) === 'undefined' ? true : a[1]; 在这里我只是对undefined做了标记，如果是NaN，我是直接拿它当字符串处理了 在这里有一个小坑得提醒一下，我们在调用函数，获取对象取值的时候，如果URL传递的key为大写，我们取对象时写的小写，那么结果就是为undefined 比如URL为http://NaoNao.com/?NamE=NaoNao，如果不做大小写的处理，调用对象取值时getAllUrlParams().NamE才能取到值NaoNao，如果做了处理，我们使用时只需要全部写成小写/大写即可，例如getAllUrlParams().name 我在这就全部转为小写了，如果你对大小写要求区分，那到时候把这段Code给去掉就好了12paramName = paramName.toLowerCase();if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase(); 接下来我们就要去处理我们接受到的paramValue，这些参数可能是索引数组，非索引数组，又或者是常规字符串 如果是索引数组，我们需要将paramValue转换成数组，并且将索引对应的值，放入索引对应的位置 如果是非索引数组，我们就要将paramValue放到数组中 如果只是常规的字符串，我们就需要为我们的对象obj创建一个常规的属性，并为其分配值。 如果这个key已经存在，那么我们就要将现有的paramValue从key:value转换为数组，并将它放到数组中 拿几个实际案例，感受一下我们要做什么吧 123456789101112131415// 索引数组getAllUrlParams('http://NaoNao.com/?colors[0]=red&amp;colors[2]=green&amp;colors[6]=blue');// &#123; \"colors\": [ \"red\", null, \"green\", null, null, null, \"blue\" ] &#125;// 非索引数组getAllUrlParams('http://NaoNao.com/?colors[]=red&amp;colors[]=green&amp;colors[]=blue');// &#123; \"colors\": [ \"red\", \"green\", \"blue\" ] &#125;// 多次传递同一个keygetAllUrlParams('http://NaoNao.com/?colors=red&amp;colors=green&amp;colors=blue');// &#123; \"colors\": [ \"red\", \"green\", \"blue\" ] &#125;// 传递了key，但是没传valuegetAllUrlParams('http://NaoNao.com/?product=shirt&amp;color=blue&amp;newuser&amp;size=m');// &#123; \"product\": \"shirt\", \"color\": \"blue\", \"newuser\": true, \"size\": \"m\" &#125; 我做这写判断时用的是正则表达式，在这里就不解释正则了。。。毕竟解释起来篇幅就太长了，能看懂就尽量看吧 每个正则要解析什么，在注释中都写了例子，稍微了解点正则表达式的同学，多半也能看懂的 对应的代码实现如下：12345678910111213141516171819202122232425262728// 如果paramName以方括号结束, e.g. colors[] or colors[2]if (paramName.match(/\\[(\\d+)?\\]$/)) &#123; // 如果paramName不存在，则创建key var key = paramName.replace(/\\[(\\d+)?\\]/, ''); if (!obj[key]) obj[key] = []; // 如果是索引数组 e.g. colors[2] if (paramName.match(/\\[\\d+\\]$/)) &#123; // 获取索引值并在对应的位置添加值 var index = /\\[(\\d+)\\]/.exec(paramName)[1]; obj[key][index] = paramValue; &#125; else &#123; // 如果是其它的类型，也放到数组中 obj[key].push(paramValue); &#125;&#125; else &#123; // 处理字符串类型 if (!obj[paramName]) &#123; // 如果如果paramName不存在，则创建对象的属性 obj[paramName] = paramValue; &#125; else if (obj[paramName] &amp;&amp; typeof obj[paramName] === 'string') &#123; // 如果属性存在，并且是个字符串，那么就转换为数组 obj[paramName] = [obj[paramName]]; obj[paramName].push(paramValue); &#125; else &#123; // 如果是其它的类型，还是往数组里丢 obj[paramName].push(paramValue); &#125;&#125; 如果你的URL的传参包含了一些特殊字符，比如空格。例如url=&quot;NaoNao.com/?name=Nao%20Nao&quot;，拿到对象值之后，是需要解码后才能获得正确的值的 12var original = getAllUrlParams().name; // 'Nao%20Nao'var decode = decodeURIComponent(original); // 'Nao Nao' 具体实现以及使用方式下面是JS的具体的完整实现，你们复制回去就可以用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253function getAllUrlParams(url) &#123; // 用JS拿到URL，如果函数接收了URL，那就用函数的参数。如果没传参，就使用当前页面的URL var queryString = url ? url.split('?')[1] : window.location.search.slice(1); // 用来存储我们所有的参数 var obj = &#123;&#125;; // 如果没有传参，返回一个空对象 if (!queryString) &#123; return obj; &#125; // stuff after # is not part of query string, so get rid of it queryString = queryString.split('#')[0]; // 将参数分成数组 var arr = queryString.split('&amp;'); for (var i = 0; i &lt; arr.length; i++) &#123; // 分离成key:value的形式 var a = arr[i].split('='); // 将undefined标记为true var paramName = a[0]; var paramValue = typeof (a[1]) === 'undefined' ? true : a[1]; // 如果调用对象时要求大小写区分，可删除这两行代码 paramName = paramName.toLowerCase(); if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase(); // 如果paramName以方括号结束, e.g. colors[] or colors[2] if (paramName.match(/\\[(\\d+)?\\]$/)) &#123; // 如果paramName不存在，则创建key var key = paramName.replace(/\\[(\\d+)?\\]/, ''); if (!obj[key]) obj[key] = []; // 如果是索引数组 e.g. colors[2] if (paramName.match(/\\[\\d+\\]$/)) &#123; // 获取索引值并在对应的位置添加值 var index = /\\[(\\d+)\\]/.exec(paramName)[1]; obj[key][index] = paramValue; &#125; else &#123; // 如果是其它的类型，也放到数组中 obj[key].push(paramValue); &#125; &#125; else &#123; // 处理字符串类型 if (!obj[paramName]) &#123; // 如果如果paramName不存在，则创建对象的属性 obj[paramName] = paramValue; &#125; else if (obj[paramName] &amp;&amp; typeof obj[paramName] === 'string') &#123; // 如果属性存在，并且是个字符串，那么就转换为数组 obj[paramName] = [obj[paramName]]; obj[paramName].push(paramValue); &#125; else &#123; // 如果是其它的类型，还是往数组里丢 obj[paramName].push(paramValue); &#125; &#125; &#125; return obj;&#125; 这个函数该怎么使用呢？ 直接把URL参数当成对象调用就OK咯~ 以文章开篇的URL为例子1234567// http://NaoNao.com/?product=shirt&amp;color=blue&amp;newuser&amp;size=m#HellogetAllUrlParams().product; // 'shirt'getAllUrlParams().color; // 'blue'getAllUrlParams().newuser; // truegetAllUrlParams().NB; // undefinedgetAllUrlParams('http://NaoNao.com/?NaoNao=shuai').NaoNao; // shuai 用起来还是很简单方便的吧~ 不兼容IE的解决方案如果我们不需要考虑IE这种妖娆贱货，以及一些非常老版本浏览器，就用浏览器内URLSearchParams的接口吧。。。这个接口可以直接拿取URL内的参数 123456// URL is http://NaoNao.com/?product=shirt&amp;color=blue&amp;newuser&amp;size=mconst urlParams = new URLSearchParams(window.location.search);// 判断参数是否存在console.log(urlParams.has('product')); // true// 获取参数对应的值console.log(urlParams.get('product')); // \"shirt\" 这个接口还提供了更多成熟的方法，比如keys(),Values(),还有entries()，这个接口该怎么使用，直接去看官方文档就好了，用起来还是很虚浮的 微信扫码关注公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦~不仅仅只是技术！","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://AdolphKevin.github.io/categories/JavaScript/"}],"tags":[{"name":"URL解析","slug":"URL解析","permalink":"https://AdolphKevin.github.io/tags/URL解析/"}]},{"title":"分享一个用Git装逼的小技巧~","slug":"分享一个用Git装逼的小技巧~","date":"2019-05-26T12:46:46.940Z","updated":"2019-05-29T17:47:47.997Z","comments":true,"path":"2019/05/26/分享一个用Git装逼的小技巧~/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/26/分享一个用Git装逼的小技巧~/","excerpt":"","text":"上次写完 实用且简单的Git教程，轻松搞定多人开发](https://mp.weixin.qq.com/s?__biz=MzU2NzczMzk5Nw==&amp;mid=2247483753&amp;idx=1&amp;sn=a8d654a7f61833b976f65a9e93b4f56c&amp;chksm=fc99faebcbee73fd8ef1b8bd777f064d90f5a8c5a628da6814065028264b174e09b1b3551176&amp;scene=21#wechat_redirect)，得到的反馈信息简直超乎我的预期。 我前两天登掘金、简书、CSDN上把微信公众号的文章copy过去的时候，那阅读量和点赞数简直亮瞎我了…… 按理来说，写的好，作为我公众号的读者们，你们都是我从别的平台辛辛苦苦一点一点的挖来的，对我更认可才对，居然没几个人给我点「好看」，也没见你们谁分享转发 我公众号所有文章的点赞数和阅读数全加起来，还不copy过去的文章的十分之一，让我很是伤心啊，点个「好看」表达一下对我文字的认可，我才更有动力写更好的文字与你们分享啊 作为一个主营微信公众号的号主，要靠别的平台的点赞数据，来获得成就感，我想我也是混的够惨了。 不过值得欣慰的是，最近有人私信我，跟我说“就是因为看了我那篇文章，才把GIT的命令行给记住的”。听了后我简直高兴的不行 GIt是个好东西，用了Git后，其它的版本控制器我是觉得真的不好用，而且命令行操作更是好用的不得了 上篇Git的命令行使用，基本已经解决了95%的问题。（只是从开发人员使用的角度） 这次做一点补充，再给你们分享个小技巧，巨好用，还能装逼！ Git Log的进阶使用Git查看日志，单独使用log```来操作，每一个commit信息太多，干扰信息又太多，而且各种分支的合并也看不到，难受的很。1234567891011121314151617181920212223242526今天给你们分享一个装逼的命令行，结合上一篇的文章[实用且简单的Git教程，5分钟搞定Git](https://www.jianshu.com/p/a3f0f55c88fb)，现在就完全可以摆脱第三方软件来使用Git了，复制粘贴即可使用&gt; git log --graph --pretty=format:&apos;%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative 给你们看看效果，是不是巨牛逼？![](https://upload-images.jianshu.io/upload_images/15072499-251d2d176bff7d3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)命令行这么长还这么复杂，我们该怎么记住呢？莫慌，再给你分享一个好东西那就是Git的一个别名操作```alias```，使用这个命令，可以极大的提高我们的命令行输入效率## alias效率为王我们经常使用的命令有```branch```，```checkout```，```commit```之类的，虽然简单，但是输入起来也是麻烦，作为一个程序员，开发程序就是为了提高效率的，能动一下手指解决问题，就绝不动两下，要把「懒」给发挥到极致才行比如看下面的例子：```gitgit config --global alias.ck checkoutgit config --global alias.br branchgit config --global alias.ck commit` 这样配置好了之后，我们以后使用这些命令，像checkout```，直接输入```git ck```就能完事。是不是666？12345678```alias.xx```点后面的```xx```就代表了我们设置的别名，使用的时候，直接输入别名就好了像上面那么长的```git log```，咱们完全就可以使用```alias```来提高效率，下面的命令行直接复制粘贴就能使用了~若是你不做任何修改，使用的时候输入```git lg```即可```gitgit config --global alias.lg &quot;log --graph --pretty=format:&apos;%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit --date=relative&quot; 配个图给你们看看 执行后，使用的时候直接打开控制台输入git lg即可，又装逼，又省事 顺便提示一下，Git的命令行操作时，复制是ctrl+insert，粘贴是shift+insert，查看日志时，按「回车键」可以加载更多日志信息，按q键是退出日志查看 在merge后的commit，偶尔会弹出一个Linux对话框让你写备注 此时需要用到Linux指令才能操作 按i进入对话框编辑模式，将commit的备注内容写好后按ESC退出编辑模式按:+wq退出并保存即可 为什么要用命令行？你们应该都知道，第三方界面化软件操作Git，本质上其实都是用的Git命令行，一些复杂的操作都是直接将GIT组合好后直接执行，只是软件把他们封装了起来，没让我们看到命令行罢了 之前我也是用可视化的第三方软件来使用Git命令行的操作，后来发现总是有着莫名其妙的问题，并且错误提示看起来就是一头雾水，后来干脆就学着使用命令行操作 使用命令行之后才发现，执行的速度以及准确度，比用第三方软件的效率要高的多，并且一些莫名其妙的问题也再也没遇见过了 因为软件是把一系列的Git命令给封装起来，而我们自己使用的时候，Git提交的逻辑顺序我们是很清楚的，这样一步一步走下来，只要逻辑是对的，就不会出错，就算出错了，命令行操作时，错在哪，该怎么修正，都提示的一清二楚，这也省下了我们拿着界面化软件的报错去找百度的时间。 刚开始用命令行操作的时候，是有一些不大习惯，但是用熟练之后，你完全就不会想打开第三方软件了~ 当然了，技术只是一个工具，工具的目的就是为了提升效率，如果觉得使用GUI界面化的软件你的效率更高，那就按照自己的高效率方式去做就好了。 像我，我就是在追求效率的同时，还想着要能装装逼~~ 我做为一个依赖Windows生态的码畜，一切都是可视化操作，唯一能有点能像电影里极客样的样子，也就是用Git命令行的时候了…… 毕竟每次用Git时，屏幕上的命令框里，突突突的跳出这些命令，感觉自己就像电影里的极客那样帅 写在最后今天周末，也就是爬上来跟你们聊会儿，顺便分享两个小技巧。以后不出意外每周都会这样，当然了，我是指每周分享个小技巧什么的，心情不错的时候，就顺带逼逼叨一下 分享的小技巧什么的，分享的范围你们可以后台留言告诉我你们想要看什么方面的，我就多写写你们想要看的，反正趁着现在关注我的人不多，基本上每个人都能照顾到，现在不压榨我，还等什么时候呢？ 扫描关注微信公众号「闹闹吃鱼」，每天都有好分享","categories":[{"name":"Git教程","slug":"Git教程","permalink":"https://AdolphKevin.github.io/categories/Git教程/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://AdolphKevin.github.io/tags/Git/"}]},{"title":"为什么你的想法那么容易动摇？","slug":"为什么你的想法那么容易动摇？","date":"2019-05-24T16:06:39.000Z","updated":"2019-05-26T03:45:55.586Z","comments":true,"path":"2019/05/25/为什么你的想法那么容易动摇？/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/25/为什么你的想法那么容易动摇？/","excerpt":"","text":"不知道大家有没有看过《奇葩说》，每当看到论题时，其实自己心中已有答案，但是随着双方的不断辩论，过程中自己的想法却也在不断的动摇，改变。更在有的时候，甚至会怀疑自己 自己的观点不断随着外界因素的改变，是一件坏事情么？ 自己观点容易动摇，最主要原因就是自己习惯性的思维方式，思维方式决定了我们最后所作的决定 有两种常见是思维方式，分别就是海绵式思维与淘金式思维 什么是海绵式思维？先来谈谈海绵式思维 想想在我们刚进入某个行业开始学习的时候，面对一切的知识，面对权威、对书本的内容深信不疑。 自己就是像一块会吸水的海绵一样，想把一切都吸收进自己的身体里 这样做并不是没好处，有两个极大的优点 可以快速的学习知识，吸收外部信息越多，越能体会到其中的千头万绪，为之后的复杂思考提供了坚实的基础 可以快速的学习高手的知识、思想，为我们成为一个有思想的人，奠定了一定高度的基础。 不过这世界总是公平的，这货有如此好处的同时，还有一个非常致命的缺点：面对纷沓而来的各种信息，这种思维方式对我们进行信息的取舍提供不了任何帮助。如果我们始终依赖海绵式思维学习，那么我们在学习的道路上，对最新学习的内容将深信不疑。 为什么海绵式思维不能让我们对信息做出取舍呢？因为它本身是一种被动的学习方式，被动的学习，我们只需要认真理解并记忆，他们的知识就能被我们“学会”。 被动学习是轻松并愉快还高效的一种方式，不需要我们对各种信息进行深入的思考与求证，尤其是面对他人拿出井井有条并生动有趣的论证过程时，我们更是对之论证结果深信不疑。 可是，不管是在学习时，还是在人生路上，我们都要自己掌握主动权，我们的人生要我们自己主宰，享受过被动学习的快速与高效后，我们要建立起自己的世界观，转被动为主动。 淘金式思维要说转被动为主动，那肯定离不开一个概念词淘金式思维 淘金式思维是一种主动的思维形式，何为主动？就是我们需要知道，哪些东西是重要的，哪些东西是不重要的，选择重要的东西，抛弃无所谓的东西。 这个名词其实就已经非常的形象的解释了什么是主动，就像沙海中淘金，把廉价的沙石去除，只留下珍贵的黄金。反正黄金自己是不会从沙海中跑你手上的。 主动学习无疑是辛苦的，因为需要我们主动思考，依赖于自己的人生观、世界观、价值观等因素，去思考什么东西才是正确的，什么东西是值得学习的。 而不像被动学习那样胡吃海喝，什么都要。 在如今这个信息爆炸的时代，淘金式思维不仅能很好的帮助我们与对方进行互动，更能帮助我们筛选无用信息。 在互动的过程中，难免会对观点或者内容有着的不同见解，当在不同见解中找不同时，双方都能有更多的收获。 要说筛选无用信息，近两天登上微博热搜榜的《搜索引擎百度已死》一文，主要说了搜索引擎百度，在信息搜索时得到的结果良莠不齐，甚至低劣内容占据更多的搜索结果。 文中作者能判断内容优劣，无非就是利用淘金式思维做了筛选。 介绍了这么多两种思维的差距以及优劣，那我们该怎么培养淘金式思维呢？ 其实培养淘金式思维也并非难事，归根结底，只是需要我们培养自己的主动意识。那该怎么主动呢？继续往下看就知道了 批判性思维说了这么多，都是为了给批判性思维做铺垫的。 不知道你们有没有遇到这种困惑？ 自己不论是小到物品选购，还是大到报考学校专业选择，只要自己在选择前，在网络上搜集了大量资料，或者咨询了周边亲戚朋友的各种建议之后，自己更是无法选择。 因为这种情况就是因为我们没有自己的批判性思考，在信息大爆炸的时代背景下，我们需要能够自己独立思考，只有当我们有了自己的思考后，才能发出自己的声音。 上面介绍的海绵式思维与淘金式思维，两者都没有绝对的好处，没有谁能替代谁。 在批判性思维中，上述两种思维是需要综合运用的。在我们知识匮乏时，需要通过海绵式思维来快速积累自己的知识，当有了一定的知识储备后，自然就能建立起我们对内容的认知。 有了这些知识储备做为我们的基础，我们才有能力去对别的内容进行判断，才能拥有我们的自己的思想。 但是在使用批判式思维时，不要陷入了自己的思维陷阱中。看看高级与低级的区分，自然也就明白陷阱是什么 在Wiki百科中，对拥有批判思考者的高低，有着以下的定义 低级的批判思考者(即持有弱批判性思维者)人们称作「诡辩家」，他们有娴熟的思考技巧，却不管自身思维是否有明显问题，他们善于挖掘他人的思考漏洞，用种种手段、技巧赢得辩论、打动他人、谋取利益。 高级的批判思考者(即持有强批判性思维者)是公正无私的，他们试图评论一切推理的真正优点与缺失，无论出于自己或他人。他们不会控制他人或逃避真相，而是用有道德、负责任的态度思考问题，他们愿意聆听自己未必赞同的论点，如有更正确的推理，也愿意改变自己的观点或立场。 总结而言，我们需要时刻使用批判性思维看待自己的思维是否有问题。 我们不能也不应该逃避真相，我们培养自己的批判性思维，不就是为了我们自己能在这信息错综复杂的时代拥有自己的思想，找到真相从而不随意被他人蛊惑吗？ 好了，扯了这么多的内容，你能看到这，我觉得我们对海绵式思维，淘金式思维，批判性思维已经达成共识了。 那我就在这说说该怎么具体应用批判性思维吧 批判性思维的具体应用在还未习惯批判性思维的思考方式时，我们需要找到套路，毕竟在没有自己的经验之前，学习前人的经验是最快且有成效的一种方式 先来看看套路是怎样的，我的总结如下三点 找观点 看结论 支撑观点的理由是逻辑正确 先来看一个例子，从实际情况出发，结合上面的套路，我们来看看实际情况是到底是怎样的。以下实践用例引用于《学会提问》（第十版） 学校的着装规定是对不当着装的限制，目的是营造一种专心致志的学习氛围。如果一个学生衣着不当地来上课，就有可能极大的分散其他同学的注意力。在校期间适用着装规定并不是限制学生的表达自由。不同于要求学生统一着装，着装规定仍旧允许学生自由选择自己的服装，只要不是被视为不当着装即可。 咱们按照上述套路来解析一下上述的观点说明。（以下解析为我个人解析，并非书本中的解析） 观点：学校该不该对着装有着限制？ 结论：学校应该限制学生的不当着装。 理由：不当着装会影响学校的学习氛围，分散同学的注意力 将问题清晰的剥离出来后，我们就可以在我们现有的知识体系上去判断此结论是否成立 首先我们需要与表达者达成共识，什么才算是”不当着装”？这点在与作者达成共识之前，我们并不好否定或者承认其结论的正确与错误。因为在某些人眼中，在不管男士女生，裤子没遮住膝盖，就属于不正当着装。又或者在有些人眼中，衣服上写着不利于社会主义的话，才算是不正当着装。 再来看逻辑是否正确，学生的穿衣为什么会影响学校的学习氛围呢？这个理由本是用来支撑“学校应该限制学生的不当着装”的结论，而这结论又是从何而来？如果我相信这个结论是正确的，那为了考虑别的同学的正常学习，学校应该限制学生的不当着装自然也应该支持。可我要是不相信不当着装会影响学习氛围，那后续的结论自然也就不成立了。 看完上述这个例子，我想你对批判性思维自然也会有了一些理解。 无非就是按照上面总结的套路来，生活中多思考，多运用。你会发现之后看到的世界，与你现在看到的世界，有了很大的不一样。 写在最后每一个人都应该学会批判性思维，反复求证自己的观点的同时，也能更准确的分辨哪些人是在胡说八道，哪些人说的观点是真的有价值。 快过年了，不管是正儿八经的公司，还是邪门歪道的骗子。都想着冲一把业绩过个好年。大家正好可以多用用批判性思维，去辨别哪些是想收割你的骗子，哪些是想教你钓鱼 一个观点只有经过自己不断的反复论证与修改，最后才能成为自己的信念 关注微信公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦！","categories":[{"name":"认知提升","slug":"认知提升","permalink":"https://AdolphKevin.github.io/categories/认知提升/"}],"tags":[{"name":"批判性思维","slug":"批判性思维","permalink":"https://AdolphKevin.github.io/tags/批判性思维/"}]},{"title":"实用且简单的Git教程，5分钟搞定Git","slug":"实用且简单的Git教程，5分钟搞定Git","date":"2019-05-24T16:00:00.000Z","updated":"2019-05-26T12:48:16.542Z","comments":true,"path":"2019/05/25/实用且简单的Git教程，5分钟搞定Git/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/25/实用且简单的Git教程，5分钟搞定Git/","excerpt":"","text":"俗说金三银四，大部分人都选择在这个时候找工作 有拿完年终奖准备跳槽的，也有年前就辞职，已经休了一个长期年假的，还有刚走出校门的青涩少年们 换了新工作，肯定要接触新项目，现在绝大多数项目都是使用Git进行版本控制 这篇文章，主要目的是在多人开发中让你能熟练使用Git 从实战出发，不大谈原理，只谈实际应用，省去大量的查找文档的时间 入职新公司，接触新项目，基本是不需要你自己搭建Git项目来托管code的，所以这里就不谈搭建了，只谈在开发实战时，如何使用Git 文末有总结，便于查阅 第一件事，肯定就是先安装Git了 官网下载Git比较麻烦，需要有梯子来帮助你，才能摸到它，这里直接给你一个Github上的镜像地址供你下载安装 https://github.com/waylau/git-for-win 若不会安装，请移步搜索引擎，搜索Git安装教程，本文不过多描述安装过程 第一次使用Git安装好后，直接打开Git Bash，也就是Git 的控制台程序，就可以开始使用了 第一次使用Git，需要先配置自己的邮箱与名称 配置邮箱地址1git config --global user.email &quot;NaoNao.@nao.com&quot; 配置用户名1git config --global user.name &quot;NaoNao&quot; 配置完，Git不会给出任何提示，Unix的逻辑就是，没有提示就是最美的提示。 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 要想查看是否配置成功，依然是使用上述命令，把引号以及引号内的内容去掉即可。 拉取项目配置好我们的个人信息后，自然也就需要拉取项目了 在磁盘中新建好存放项目的文件夹，进入文件夹点击鼠标右键，选择Git Bash即可 温馨提示：使用Git托管的项目，有两种地址，Https与SSH。 使用Https地址拉取，验证一次密码后，以后每次拉取/推送的时候不再需要验证密码。 使用SSH地址拉取的项目，每次拉取/推送的时候都需要密码验证。各位读者自己抉择。 我的项目地址是 https://github.com/AdolphKevin/NaoNao.git1git clone https://github.com/AdolphKevin/NaoNao.git 将你的项目地址替换掉我的项目地址即可 分支管理说分支管理之前，在此做个背景说明：一般在项目开发中会有2个主分支（master与develop） master分支上的内容是发布在生产环境运行的内容 develop分支是所有开发人员开发完成发布到测试环境的内容 其它各种feature分支都是各位开发人员在开发时拉取使用的分支 此文，也沿用此方式，各位读者按照自己实际情况判断 拉取下来后，我们要进行开发，肯定不能在master分支上开发，一般在项目上都会有各种分支 项目clone下来，首先就是查看分支了1git branch -r 加上-r是代表查看远程仓库的分支，要是查看本地分支，只需要把-r去掉即可，-r是remote的简写 查看远程分支，所有的分支名前均会带有origin/ 的前缀，这个前缀代表着远程分支，拉取远程分支，填写远程分支名时不需要带上origin/ 接到开发任务，我们需要从远程仓库上将我们需要开发的分支拉取到本地1git fetch origin x(远程分支名):y(本地分支名) 使用上述代码，可以将远程分支拉取到本地，并创建本地分支 接着就是要将刚刚创建的本地分支与远程分支做关联了，做了关联之后，拉取更新与推送都不需要再指定分支名称1git branch --set-upstream-to=origin/x(远程分支名) y(本地分支名) 其中，x是你本地分支对应的远程分支；y是你当前的本地分支。 切换分支做完关联后，咱们就需要切换分支，在特定的分支上去进行开发任务先查看本地分支，找到我们需要开发的分支1git branch 再切换到我们需要开发的分支上1git checkout y(分支名) 提交内容我们在自己的分支上按照需求完成了开发任务，接着就是将我们开发的内容提交到远程仓库了 虽然咱们所在的分支，除了自己之外，按理说是没人会在自己这个分支上再进行开发，所以推送前拉取更新也不很必要 但是为了避免不必要的麻烦，提交之前还是先拉取一下最新的数据1git pull 获取了最新数据后，如果有别的同事动了咱们的分支，那肯定得先解决一下文件的冲突，若没有人动，那也就不用处理了 接着将我们添加/修改的文件提交到本地暂存区1git add xxx(文件名) xxx代表着文件名。当然，开发时咱们基本上很少只修改/添加一个单独的文件，当修改或添加了很多文件时，让我们一个一个文件的add，能把人给累死 所以Git也给出了批量add的方法，简单粗暴1git add -A -A是All的缩写，git add all 可以提交未跟踪、修改和删除文件。.git add . 可以提交未跟踪和修改文件，但是不处理删除文件。 提交到暂存区后完成后就是将改动内容全部提交1git commit -m &quot;提交到暂存区&quot; 引号内的文字，是此次提交内容的一个说明描述，以后看日志时也便于知道此次进行了什么内容的修改 提交完后就是将本次修改的内容推送至远程仓库1git push 好了，到这里push的时候，坑来了~~~ 如果是自己一个人的项目，此时如何push都没问题，但问题就出在，咱们是多人开发的项目，咱们的分支是需要与主分支合并(merge)。 别的同事的任务完成了，早已推送到我们将要合并的develop分支上了 所以我们在push之前需要进行code merge ，将develop分支上的内容merge到我们当前的feature分支上 代码合并此时我们在feature分支上已经将修改内容commit了需要将develop分支的内容合并到当前分支，先切换分支到develop上，再获取一次更新12git checkout developgit pull 这里切换到develop分支上获取更新时有个小坑，咱们暂且按照一切顺利来处理，后面再说一些常见的意外情况的处理。 获取完更新后，再切换到我们的feature分支上，将develop的内容合并到我们的feature分支上1git checkout feature 合并某分支到当前分支1git merge develop 解决冲突执行merge后，如果有冲突，控制台会将有冲突的文件名展示出来，我们按照文件名找到对应文件，将冲突给解决掉后。 打开文件我们可以看到冲突的内容，例如： &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADhello world feature\\=======hello world develop>&gt;&gt;&gt;&gt;&gt; develop Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 &lt;&lt;&lt;&lt;&lt;&lt;&lt;与=======之间的内容为当前分支的内容 =======与&gt;&gt;&gt;&gt;&gt;&gt;之间的内容为develop分支的内容（换句话说：就是需要被合并的分支内容） 将不需要保留的内容删除即可解决冲突 解决冲突后，我们再将当前的feature分支推送到远程仓库1git push 执行完本命令行后，即可将本地分支内容推送至远程仓库 获取更新时的意外情况前面说从feature分支切换到develop分支拉取更新时，会有个小坑，因为有时候Git会报错 Git pull - Please move or remove them before you can merge 这个错误是因为无论原始文件中.gitignore 文件的内容是什么，文件都被添加到远程存储库中。 由于文件存在于远程存储库中，因此git也必须将它们提取到本地工作树，因此会抱怨文件已经存在。 .gitignore 仅用于扫描新添加的文件，它与已添加的文件没有任何关系。 因此，解决方案是删除工作树中的文件并提取最新版本。或者长期解决方案是如果错误地添加了文件，则从存储库中删除文件。 这时我们在develop 分支上删除当前目录下没有被track过的文件和文件夹1git clean -d -f 现在重新获取更新即可 开发到一半，却需要切换分支软件开发中，Bug就像家常便饭一样。有了Bug就需要修复，在Git中，由于分支是如此的强大，所以，在实战中，每个Bug都是通过一个新的临时分支来修复，修复后，将Bug分支合并到develop与master两个分支上，然后将临时分支删除 注意：将Bug分支合并到develop与master两个分支上，是在远程仓库完成。在本地，是需要将develop与master分支先获取最新，然后将这两分支分别合并在Bug分支上，解决冲突后直接推送Bug分支即可 可我们在feature分支上开发功能开发到一半，leader突然跑来告诉我们，生产环境出现了一个Bug，需要咱们紧急修复，咱们兴致勃勃的使用git checkout Bug命令，打算切换到Bug分支上去修复Bug 结果……Git却告诉我们，无法切换过去，因为我们目前所在分支没有提交…… 可我们若要完成开发任务再去修复Bug，可能需要好几个小时甚至几天时间才能完成，而Bug修复却是紧急任务，这该如何是好呢？ 问题不大，不慌。此时我们可以将当前分支开发的工作状态储藏下来，待我们解决了Bug，再恢复我们现在的状态1git stash 执行完上述命令后，我们再来看看我们工作区是否干净1git status 我们发现工作区非常干净，此时我们就可以顺利的执行checkout Bug```到Bug分支上去修改Bug了123456咱们现在将Bug也解决了，也推送了，现在又回到feature分支继续咱们之前的任务了，切换回feature分支后，之前修改的内容也没有恢复啊！说好的储藏了工作状态呢？咱们就来看看所有储藏的工作```gitgit stash list 使用上述命令，Git会将所有的储藏工作罗列出来，当我们想要恢复其中某一个储藏状态时，指定其名字就好了1git stash apply stash@&#123;0&#125; 上述的stash@{0} 是当前分支储藏的工作名，各位读者根据自己的stash list ```中的内容，自行替换1234切换后，确认完当前状态无误了，就可以将之前保存的储藏删除```gitgit stash drop stash@&#123;0&#125; 觉得要执行两行命令比较麻烦？没关系，还有一次性解决问题的方法切换后并自动删除12git stash pop stash@&#123;0&#125;` 不过我个人不大推荐这种方式，万一咱们恢复的储藏指定错了呢，要恢复起来还挺麻烦的。 版本回退在开发时，总有需要回退到某个版本的时候，不然用版本控制系统干嘛？是吧 我们先来看看我们的历史版本1git log 现在控制台输出了最近三次提交的日志信息，友情提示一下，按键盘Q可退出，按回车可查看更多的日志 要是嫌弃输出的内容过于冗杂，可以让Git显示个简单版1git log --pretty=oneline 加上一个12345678现在我们可以根据当时commit时填写的描述信息，来判断哪一个ID是我们想要回退的版本版本的回退，有两种常用的方式回退到上一个版本```git git reset --hard HEAD 根据commit的ID，回退到指定版本1git reset --hard commit_id commit_id这个版本号没必要写全，只需要写6位以上就差不多了，Git能自己找到它，若存在前6位重复ID，那再多加几位就好了 版本的回退也非常的简单吧，Git的命令行操作写到这儿，也进入尾声了。上述的命令基本可以满足日常的使用 写在最后的总结Git命令行的操作，使用起来并不复杂，作为开发人员，要是没有深入了解Git的意愿，会用就行了，使用Git的要领就是大量使用分支总结一下本文牵扯到的git操作git config --global user.name查看用户名或配置用户名 git config --global user.email查看email或配置email git clone将远程仓库的项目克隆到本地 git branch查看分支 git branch -r查看远程分支 git branch &lt;name&gt;创建分支 git fetch origin origin/remote_branch:your_branch将远程分支下载到本地，并创建分支 git branch --set-upstream-to=origin/remote_branch your_branch将本地分支与远程分支做关联 git pull获取更新 git clean -d -f删除当前目录下没有被track过的文件和文件夹 git merge &lt;name&gt;将目标分支合并到当前分支 git add将内容添加到暂存区 git commit将添加的内容提交 git push将本地提交内容推送到远程仓库 git checkout切换分支 git branch -d &lt;name&gt;删除分支 git stash储藏当前分支所有内容 git stash list查看当前分支储藏列表 git stash apply恢复指定储藏内容 git stash drop删除指定储藏内容 git stash pop恢复并删除指定储藏内容 git status显示工作目录和暂存区的状态 git log显示commit的详细日志 git log --pretty=oneline只显示commit的ID与描述 git reset --hard HEAD回退到最近的一个版本 git reset --hard commit_id根据commit_id回退到指定版本 关注微信公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦！","categories":[{"name":"Git教程","slug":"Git教程","permalink":"https://AdolphKevin.github.io/categories/Git教程/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://AdolphKevin.github.io/tags/Git/"}]}]}