{"meta":{"title":"闹闹吃鱼","subtitle":"闹闹","description":"闹闹的小站","author":"闹闹","url":"https://AdolphKevin.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-05-25T11:52:40.000Z","updated":"2019-05-25T12:37:44.144Z","comments":false,"path":"categories/index.html","permalink":"https://AdolphKevin.github.io/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2019-05-25T12:18:55.000Z","updated":"2019-05-25T13:04:03.193Z","comments":false,"path":"tags/index.html","permalink":"https://AdolphKevin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"为什么你的想法那么容易动摇？","slug":"为什么你的想法那么容易动摇？","date":"2019-05-24T16:06:39.000Z","updated":"2019-05-26T03:45:55.586Z","comments":true,"path":"2019/05/25/为什么你的想法那么容易动摇？/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/25/为什么你的想法那么容易动摇？/","excerpt":"","text":"不知道大家有没有看过《奇葩说》，每当看到论题时，其实自己心中已有答案，但是随着双方的不断辩论，过程中自己的想法却也在不断的动摇，改变。更在有的时候，甚至会怀疑自己 自己的观点不断随着外界因素的改变，是一件坏事情么？ 自己观点容易动摇，最主要原因就是自己习惯性的思维方式，思维方式决定了我们最后所作的决定 有两种常见是思维方式，分别就是海绵式思维与淘金式思维 什么是海绵式思维？先来谈谈海绵式思维 想想在我们刚进入某个行业开始学习的时候，面对一切的知识，面对权威、对书本的内容深信不疑。 自己就是像一块会吸水的海绵一样，想把一切都吸收进自己的身体里 这样做并不是没好处，有两个极大的优点 可以快速的学习知识，吸收外部信息越多，越能体会到其中的千头万绪，为之后的复杂思考提供了坚实的基础 可以快速的学习高手的知识、思想，为我们成为一个有思想的人，奠定了一定高度的基础。 不过这世界总是公平的，这货有如此好处的同时，还有一个非常致命的缺点：面对纷沓而来的各种信息，这种思维方式对我们进行信息的取舍提供不了任何帮助。如果我们始终依赖海绵式思维学习，那么我们在学习的道路上，对最新学习的内容将深信不疑。 为什么海绵式思维不能让我们对信息做出取舍呢？因为它本身是一种被动的学习方式，被动的学习，我们只需要认真理解并记忆，他们的知识就能被我们“学会”。 被动学习是轻松并愉快还高效的一种方式，不需要我们对各种信息进行深入的思考与求证，尤其是面对他人拿出井井有条并生动有趣的论证过程时，我们更是对之论证结果深信不疑。 可是，不管是在学习时，还是在人生路上，我们都要自己掌握主动权，我们的人生要我们自己主宰，享受过被动学习的快速与高效后，我们要建立起自己的世界观，转被动为主动。 淘金式思维要说转被动为主动，那肯定离不开一个概念词淘金式思维 淘金式思维是一种主动的思维形式，何为主动？就是我们需要知道，哪些东西是重要的，哪些东西是不重要的，选择重要的东西，抛弃无所谓的东西。 这个名词其实就已经非常的形象的解释了什么是主动，就像沙海中淘金，把廉价的沙石去除，只留下珍贵的黄金。反正黄金自己是不会从沙海中跑你手上的。 主动学习无疑是辛苦的，因为需要我们主动思考，依赖于自己的人生观、世界观、价值观等因素，去思考什么东西才是正确的，什么东西是值得学习的。 而不像被动学习那样胡吃海喝，什么都要。 在如今这个信息爆炸的时代，淘金式思维不仅能很好的帮助我们与对方进行互动，更能帮助我们筛选无用信息。 在互动的过程中，难免会对观点或者内容有着的不同见解，当在不同见解中找不同时，双方都能有更多的收获。 要说筛选无用信息，近两天登上微博热搜榜的《搜索引擎百度已死》一文，主要说了搜索引擎百度，在信息搜索时得到的结果良莠不齐，甚至低劣内容占据更多的搜索结果。 文中作者能判断内容优劣，无非就是利用淘金式思维做了筛选。 介绍了这么多两种思维的差距以及优劣，那我们该怎么培养淘金式思维呢？ 其实培养淘金式思维也并非难事，归根结底，只是需要我们培养自己的主动意识。那该怎么主动呢？继续往下看就知道了 批判性思维说了这么多，都是为了给批判性思维做铺垫的。 不知道你们有没有遇到这种困惑？ 自己不论是小到物品选购，还是大到报考学校专业选择，只要自己在选择前，在网络上搜集了大量资料，或者咨询了周边亲戚朋友的各种建议之后，自己更是无法选择。 因为这种情况就是因为我们没有自己的批判性思考，在信息大爆炸的时代背景下，我们需要能够自己独立思考，只有当我们有了自己的思考后，才能发出自己的声音。 上面介绍的海绵式思维与淘金式思维，两者都没有绝对的好处，没有谁能替代谁。 在批判性思维中，上述两种思维是需要综合运用的。在我们知识匮乏时，需要通过海绵式思维来快速积累自己的知识，当有了一定的知识储备后，自然就能建立起我们对内容的认知。 有了这些知识储备做为我们的基础，我们才有能力去对别的内容进行判断，才能拥有我们的自己的思想。 但是在使用批判式思维时，不要陷入了自己的思维陷阱中。看看高级与低级的区分，自然也就明白陷阱是什么 在Wiki百科中，对拥有批判思考者的高低，有着以下的定义 低级的批判思考者(即持有弱批判性思维者)人们称作「诡辩家」，他们有娴熟的思考技巧，却不管自身思维是否有明显问题，他们善于挖掘他人的思考漏洞，用种种手段、技巧赢得辩论、打动他人、谋取利益。 高级的批判思考者(即持有强批判性思维者)是公正无私的，他们试图评论一切推理的真正优点与缺失，无论出于自己或他人。他们不会控制他人或逃避真相，而是用有道德、负责任的态度思考问题，他们愿意聆听自己未必赞同的论点，如有更正确的推理，也愿意改变自己的观点或立场。 总结而言，我们需要时刻使用批判性思维看待自己的思维是否有问题。 我们不能也不应该逃避真相，我们培养自己的批判性思维，不就是为了我们自己能在这信息错综复杂的时代拥有自己的思想，找到真相从而不随意被他人蛊惑吗？ 好了，扯了这么多的内容，你能看到这，我觉得我们对海绵式思维，淘金式思维，批判性思维已经达成共识了。 那我就在这说说该怎么具体应用批判性思维吧 批判性思维的具体应用在还未习惯批判性思维的思考方式时，我们需要找到套路，毕竟在没有自己的经验之前，学习前人的经验是最快且有成效的一种方式 先来看看套路是怎样的，我的总结如下三点 找观点 看结论 支撑观点的理由是逻辑正确 先来看一个例子，从实际情况出发，结合上面的套路，我们来看看实际情况是到底是怎样的。以下实践用例引用于《学会提问》（第十版） 学校的着装规定是对不当着装的限制，目的是营造一种专心致志的学习氛围。如果一个学生衣着不当地来上课，就有可能极大的分散其他同学的注意力。在校期间适用着装规定并不是限制学生的表达自由。不同于要求学生统一着装，着装规定仍旧允许学生自由选择自己的服装，只要不是被视为不当着装即可。 咱们按照上述套路来解析一下上述的观点说明。（以下解析为我个人解析，并非书本中的解析） 观点：学校该不该对着装有着限制？ 结论：学校应该限制学生的不当着装。 理由：不当着装会影响学校的学习氛围，分散同学的注意力 将问题清晰的剥离出来后，我们就可以在我们现有的知识体系上去判断此结论是否成立 首先我们需要与表达者达成共识，什么才算是”不当着装”？这点在与作者达成共识之前，我们并不好否定或者承认其结论的正确与错误。因为在某些人眼中，在不管男士女生，裤子没遮住膝盖，就属于不正当着装。又或者在有些人眼中，衣服上写着不利于社会主义的话，才算是不正当着装。 再来看逻辑是否正确，学生的穿衣为什么会影响学校的学习氛围呢？这个理由本是用来支撑“学校应该限制学生的不当着装”的结论，而这结论又是从何而来？如果我相信这个结论是正确的，那为了考虑别的同学的正常学习，学校应该限制学生的不当着装自然也应该支持。可我要是不相信不当着装会影响学习氛围，那后续的结论自然也就不成立了。 看完上述这个例子，我想你对批判性思维自然也会有了一些理解。 无非就是按照上面总结的套路来，生活中多思考，多运用。你会发现之后看到的世界，与你现在看到的世界，有了很大的不一样。 写在最后每一个人都应该学会批判性思维，反复求证自己的观点的同时，也能更准确的分辨哪些人是在胡说八道，哪些人说的观点是真的有价值。 快过年了，不管是正儿八经的公司，还是邪门歪道的骗子。都想着冲一把业绩过个好年。大家正好可以多用用批判性思维，去辨别哪些是想收割你的骗子，哪些是想教你钓鱼 一个观点只有经过自己不断的反复论证与修改，最后才能成为自己的信念 关注微信公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦！","categories":[{"name":"认知提升","slug":"认知提升","permalink":"https://AdolphKevin.github.io/categories/认知提升/"}],"tags":[{"name":"批判性思维","slug":"批判性思维","permalink":"https://AdolphKevin.github.io/tags/批判性思维/"}]},{"title":"实用且简单的Git教程，5分钟搞定Git","slug":"实用且简单的Git教程，5分钟搞定Git","date":"2019-05-24T16:00:00.000Z","updated":"2019-05-26T03:45:55.587Z","comments":true,"path":"2019/05/25/实用且简单的Git教程，5分钟搞定Git/","link":"","permalink":"https://AdolphKevin.github.io/2019/05/25/实用且简单的Git教程，5分钟搞定Git/","excerpt":"","text":"俗说金三银四，大部分人都选择在这个时候找工作 有拿完年终奖准备跳槽的，也有年前就辞职，已经休了一个长期年假的，还有刚走出校门的青涩少年们 换了新工作，肯定要接触新项目，现在绝大多数项目都是使用Git进行版本控制 这篇文章，主要目的是在多人开发中让你能熟练使用Git 从实战出发，不大谈原理，只谈实际应用，省去大量的查找文档的时间 入职新公司，接触新项目，基本是不需要你自己搭建Git项目来托管code的，所以这里就不谈搭建了，只谈在开发实战时，如何使用Git 文末有总结，便于查阅 第一件事，肯定就是先安装Git了 官网下载Git比较麻烦，需要有梯子来帮助你，才能摸到它，这里直接给你一个Github上的镜像地址供你下载安装 https://github.com/waylau/git-for-win 若不会安装，请移步搜索引擎，搜索Git安装教程，本文不过多描述安装过程 第一次使用Git安装好后，直接打开Git Bash，也就是Git 的控制台程序，就可以开始使用了 第一次使用Git，需要先配置自己的邮箱与名称 配置邮箱地址1git config --global user.email &quot;NaoNao.@nao.com&quot; 配置用户名1git config --global user.name &quot;NaoNao&quot; 配置完，Git不会给出任何提示，Unix的逻辑就是，没有提示就是最美的提示。 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 要想查看是否配置成功，依然是使用上述命令，把引号以及引号内的内容去掉即可。 拉取项目配置好我们的个人信息后，自然也就需要拉取项目了 在磁盘中新建好存放项目的文件夹，进入文件夹点击鼠标右键，选择Git Bash即可 温馨提示：使用Git托管的项目，有两种地址，Https与SSH。使用Https地址拉取，验证一次密码后，以后每次拉取/推送的时候不再需要验证密码。使用SSH地址拉取的项目，每次拉取/推送的时候都需要密码验证。各位读者自己抉择。 我的项目地址是 https://github.com/AdolphKevin/NaoNao.git1git clone https://github.com/AdolphKevin/NaoNao.git 将你的项目地址替换掉我的项目地址即可 分支管理说分支管理之前，在此做个背景说明：一般在项目开发中会有2个主分支（master与develop） master分支上的内容是发布在生产环境运行的内容 develop分支是所有开发人员开发完成发布到测试环境的内容 其它各种feature分支都是各位开发人员在开发时拉取使用的分支 此文，也沿用此方式，各位读者按照自己实际情况判断 拉取下来后，我们要进行开发，肯定不能在master分支上开发，一般在项目上都会有各种分支 项目clone下来，首先就是查看分支了1git branch -r 加上-r是代表查看远程仓库的分支，要是查看本地分支，只需要把-r去掉即可，-r是remote的简写 查看远程分支，所有的分支名前均会带有origin/ 的前缀，这个前缀代表着远程分支，拉取远程分支，填写远程分支名时不需要带上origin/ 接到开发任务，我们需要从远程仓库上将我们需要开发的分支拉取到本地1git fetch origin x(远程分支名):y(本地分支名) 使用上述代码，可以将远程分支拉取到本地，并创建本地分支 接着就是要将刚刚创建的本地分支与远程分支做关联了，做了关联之后，拉取更新与推送都不需要再指定分支名称1git branch --set-upstream-to=origin/x(远程分支名) y(本地分支名) 其中，x是你本地分支对应的远程分支；y是你当前的本地分支。 切换分支做完关联后，咱们就需要切换分支，在特定的分支上去进行开发任务先查看本地分支，找到我们需要开发的分支1git branch 再切换到我们需要开发的分支上1git checkout y(分支名) 提交内容我们在自己的分支上按照需求完成了开发任务，接着就是将我们开发的内容提交到远程仓库了 虽然咱们所在的分支，除了自己之外，按理说是没人会在自己这个分支上再进行开发，所以推送前拉取更新也不很必要 但是为了避免不必要的麻烦，提交之前还是先拉取一下最新的数据1git pull 获取了最新数据后，如果有别的同事动了咱们的分支，那肯定得先解决一下文件的冲突，若没有人动，那也就不用处理了 接着将我们添加/修改的文件提交到本地暂存区1git add xxx(文件名) xxx代表着文件名。当然，开发时咱们基本上很少只修改/添加一个单独的文件，当修改或添加了很多文件时，让我们一个一个文件的add，能把人给累死 所以Git也给出了批量add的方法，简单粗暴1git add -A -A是All的缩写，git add all 可以提交未跟踪、修改和删除文件。.git add . 可以提交未跟踪和修改文件，但是不处理删除文件。 提交到暂存区后完成后就是将改动内容全部提交1git commit -m &quot;提交到暂存区&quot; 引号内的文字，是此次提交内容的一个说明描述，以后看日志时也便于知道此次进行了什么内容的修改 提交完后就是将本次修改的内容推送至远程仓库1git push 好了，到这里push的时候，坑来了~~~ 如果是自己一个人的项目，此时如何push都没问题，但问题就出在，咱们是多人开发的项目，咱们的分支是需要与主分支合并(merge)。 别的同事的任务完成了，早已推送到我们将要合并的develop分支上了 所以我们在push之前需要进行code merge ，将develop分支上的内容merge到我们当前的feature分支上 代码合并此时我们在feature分支上已经将修改内容commit了需要将develop分支的内容合并到当前分支，先切换分支到develop上，再获取一次更新12git checkout developgit pull 这里切换到develop分支上获取更新时有个小坑，咱们暂且按照一切顺利来处理，后面再说一些常见的意外情况的处理。 获取完更新后，再切换到我们的feature分支上，将develop的内容合并到我们的feature分支上1git checkout feature 合并某分支到当前分支1git merge develop 解决冲突执行merge后，如果有冲突，控制台会将有冲突的文件名展示出来，我们按照文件名找到对应文件，将冲突给解决掉后。 打开文件我们可以看到冲突的内容，例如： \\&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt; develop Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 &lt;&lt;&lt;&lt;&lt;&lt;&lt;与=======之间的内容为当前分支的内容 =======与&gt;&gt;&gt;&gt;&gt;&gt;之间的内容为develop分支的内容（换句话说：就是需要被合并的分支内容） 将不需要保留的内容删除即可解决冲突 解决冲突后，我们再将当前的feature分支推送到远程仓库1git push 执行完本命令行后，即可将本地分支内容推送至远程仓库 获取更新时的意外情况前面说从feature分支切换到develop分支拉取更新时，会有个小坑，因为有时候Git会报错 Git pull - Please move or remove them before you can merge 这个错误是因为无论原始文件中.gitignore 文件的内容是什么，文件都被添加到远程存储库中。 由于文件存在于远程存储库中，因此git也必须将它们提取到本地工作树，因此会抱怨文件已经存在。 .gitignore 仅用于扫描新添加的文件，它与已添加的文件没有任何关系。 因此，解决方案是删除工作树中的文件并提取最新版本。或者长期解决方案是如果错误地添加了文件，则从存储库中删除文件。 这时我们在develop 分支上删除当前目录下没有被track过的文件和文件夹1git clean -d -f 现在重新获取更新即可 开发到一半，却需要切换分支软件开发中，Bug就像家常便饭一样。有了Bug就需要修复，在Git中，由于分支是如此的强大，所以，在实战中，每个Bug都是通过一个新的临时分支来修复，修复后，将Bug分支合并到develop与master两个分支上，然后将临时分支删除 注意：将Bug分支合并到develop与master两个分支上，是在远程仓库完成。在本地，是需要将develop与master分支先获取最新，然后将这两分支分别合并在Bug分支上，解决冲突后直接推送Bug分支即可 可我们在feature分支上开发功能开发到一半，leader突然跑来告诉我们，生产环境出现了一个Bug，需要咱们紧急修复，咱们兴致勃勃的使用git checkout Bug命令，打算切换到Bug分支上去修复Bug 结果……Git却告诉我们，无法切换过去，因为我们目前所在分支没有提交…… 可我们若要完成开发任务再去修复Bug，可能需要好几个小时甚至几天时间才能完成，而Bug修复却是紧急任务，这该如何是好呢？ 问题不大，不慌。此时我们可以将当前分支开发的工作状态储藏下来，待我们解决了Bug，再恢复我们现在的状态1git stash 执行完上述命令后，我们再来看看我们工作区是否干净1git status 我们发现工作区非常干净，此时我们就可以顺利的执行checkout Bug```到Bug分支上去修改Bug了123456咱们现在将Bug也解决了，也推送了，现在又回到feature分支继续咱们之前的任务了，切换回feature分支后，之前修改的内容也没有恢复啊！说好的储藏了工作状态呢？咱们就来看看所有储藏的工作```gitgit stash list 使用上述命令，Git会将所有的储藏工作罗列出来，当我们想要恢复其中某一个储藏状态时，指定其名字就好了1git stash apply stash@&#123;0&#125; 上述的stash@{0} 是当前分支储藏的工作名，各位读者根据自己的stash list ```中的内容，自行替换1234切换后，确认完当前状态无误了，就可以将之前保存的储藏删除```gitgit stash drop stash@&#123;0&#125; 觉得要执行两行命令比较麻烦？没关系，还有一次性解决问题的方法切换后并自动删除12git stash pop stash@&#123;0&#125;` 不过我个人不大推荐这种方式，万一咱们恢复的储藏指定错了呢，要恢复起来还挺麻烦的。 版本回退在开发时，总有需要回退到某个版本的时候，不然用版本控制系统干嘛？是吧 我们先来看看我们的历史版本1git log 现在控制台输出了最近三次提交的日志信息，友情提示一下，按键盘Q可退出，按回车可查看更多的日志 要是嫌弃输出的内容过于冗杂，可以让Git显示个简单版1git log --pretty=oneline 加上一个12345678现在我们可以根据当时commit时填写的描述信息，来判断哪一个ID是我们想要回退的版本版本的回退，有两种常用的方式回退到上一个版本```git git reset --hard HEAD 根据commit的ID，回退到指定版本1git reset --hard commit_id commit_id这个版本号没必要写全，只需要写6位以上就差不多了，Git能自己找到它，若存在前6位重复ID，那再多加几位就好了 版本的回退也非常的简单吧，Git的命令行操作写到这儿，也进入尾声了。上述的命令基本可以满足日常的使用 写在最后的总结Git命令行的操作，使用起来并不复杂，作为开发人员，要是没有深入了解Git的意愿，会用就行了，使用Git的要领就是大量使用分支总结一下本文牵扯到的git操作git config --global user.name查看用户名或配置用户名 git config --global user.email查看email或配置email git clone将远程仓库的项目克隆到本地 git branch查看分支 git branch -r查看远程分支 git branch &lt;name&gt;创建分支 git fetch origin origin/remote_branch:your_branch将远程分支下载到本地，并创建分支 git branch --set-upstream-to=origin/remote_branch your_branch将本地分支与远程分支做关联 git pull获取更新 git clean -d -f删除当前目录下没有被track过的文件和文件夹 git merge &lt;name&gt;将目标分支合并到当前分支 git add将内容添加到暂存区 git commit将添加的内容提交 git push将本地提交内容推送到远程仓库 git checkout切换分支 git branch -d &lt;name&gt;删除分支 git stash储藏当前分支所有内容 git stash list查看当前分支储藏列表 git stash apply恢复指定储藏内容 git stash drop删除指定储藏内容 git stash pop恢复并删除指定储藏内容 git status显示工作目录和暂存区的状态 git log显示commit的详细日志 git log --pretty=oneline只显示commit的ID与描述 git reset --hard HEAD回退到最近的一个版本 git reset --hard commit_id根据commit_id回退到指定版本 关注微信公众号「闹闹吃鱼」，每周都有好分享，还可领取学习资源哦！","categories":[{"name":"Git教程","slug":"Git教程","permalink":"https://AdolphKevin.github.io/categories/Git教程/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://AdolphKevin.github.io/tags/Git/"}]}]}